generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model experience {
  company     String?
  description String
  endDate     DateTime?
  id          Int       @id @default(autoincrement())
  location    String?
  startDate   DateTime
  title       String
  userId      Int
  user        user      @relation(fields: [userId], references: [id], map: "Experience_userId_fkey")

  @@index([userId], map: "Experience_userId_fkey")
}

model friendrequest {
  id                                  Int      @id @default(autoincrement())
  senderId                            Int
  receiverId                          Int
  status                              String
  createdAt                           DateTime @default(now())
  user_friendrequest_receiverIdTouser user     @relation("friendrequest_receiverIdTouser", fields: [receiverId], references: [id], map: "FriendRequest_receiverId_fkey")
  user_friendrequest_senderIdTouser   user     @relation("friendrequest_senderIdTouser", fields: [senderId], references: [id], map: "FriendRequest_senderId_fkey")

  @@index([receiverId], map: "FriendRequest_receiverId_fkey")
  @@index([senderId], map: "FriendRequest_senderId_fkey")
}

model friendship {
  id                            Int      @id @default(autoincrement())
  user1Id                       Int
  user2Id                       Int
  createdAt                     DateTime @default(now())
  user_friendship_user1IdTouser user     @relation("friendship_user1IdTouser", fields: [user1Id], references: [id], map: "Friendship_user1Id_fkey")
  user_friendship_user2IdTouser user     @relation("friendship_user2IdTouser", fields: [user2Id], references: [id], map: "Friendship_user2Id_fkey")

  @@unique([user1Id, user2Id], map: "Friendship_user1Id_user2Id_key")
  @@index([user2Id], map: "Friendship_user2Id_fkey")
}

model hackathon {
  createdAt         DateTime @default(now())
  description       String
  endDate           DateTime
  id                Int      @id @default(autoincrement())
  maxTeamSize       Int
  name              String
  posterUrl         String?
  registrationEnd   DateTime
  registrationStart DateTime
  startDate         DateTime
  updatedAt         DateTime
  team              team[]
}

model message {
  id                            Int       @id @default(autoincrement())
  senderId                      Int
  receiverId                    Int
  content                       String
  createdAt                     DateTime  @default(now())
  readAt                        DateTime?
  user_message_receiverIdTouser user      @relation("message_receiverIdTouser", fields: [receiverId], references: [id], map: "Message_receiverId_fkey")
  user_message_senderIdTouser   user      @relation("message_senderIdTouser", fields: [senderId], references: [id], map: "Message_senderId_fkey")

  @@index([receiverId], map: "Message_receiverId_fkey")
  @@index([senderId], map: "Message_senderId_fkey")
}

model notification {
  content   String
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  isRead    Boolean  @default(false)
  type      String
  userId    Int
  user      user     @relation(fields: [userId], references: [id], map: "Notification_userId_fkey")

  @@index([userId], map: "Notification_userId_fkey")
}

model personalpreference {
  id           Int     @id @default(autoincrement())
  userId       Int     @unique(map: "PersonalPreference_userId_key")
  fieldOfStudy String?
  user         user    @relation(fields: [userId], references: [id], map: "PersonalPreference_userId_fkey")
}

model review {
  comment                      String?
  createdAt                    DateTime @default(now())
  giverId                      Int
  id                           Int      @id @default(autoincrement())
  rating                       Int
  receiverId                   Int
  user_review_giverIdTouser    user     @relation("review_giverIdTouser", fields: [giverId], references: [id], map: "Review_giverId_fkey")
  user_review_receiverIdTouser user     @relation("review_receiverIdTouser", fields: [receiverId], references: [id], map: "Review_receiverId_fkey")

  @@index([giverId], map: "Review_giverId_fkey")
  @@index([receiverId], map: "Review_receiverId_fkey")
}

model skill {
  category  String
  id        Int         @id @default(autoincrement())
  name      String
  userskill userskill[]
}

model swipe {
  createdAt                 DateTime @default(now())
  id                        Int      @id @default(autoincrement())
  isLike                    Boolean
  swipeeId                  Int
  swiperId                  Int
  user_swipe_swipeeIdTouser user     @relation("swipe_swipeeIdTouser", fields: [swipeeId], references: [id], map: "Swipe_swipeeId_fkey")
  user_swipe_swiperIdTouser user     @relation("swipe_swiperIdTouser", fields: [swiperId], references: [id], map: "Swipe_swiperId_fkey")

  @@index([swipeeId], map: "Swipe_swipeeId_fkey")
  @@index([swiperId], map: "Swipe_swiperId_fkey")
}

model team {
  createdAt      DateTime         @default(now())
  hackathonId    Int
  id             Int              @id @default(autoincrement())
  isOpen         Boolean          @default(true)
  name           String
  ownerId        Int
  updatedAt      DateTime
  hackathon      hackathon        @relation(fields: [hackathonId], references: [id], map: "Team_hackathonId_fkey")
  user           user             @relation(fields: [ownerId], references: [id], map: "Team_ownerId_fkey")
  teaminvitation teaminvitation[]
  teammember     teammember[]

  @@index([hackathonId], map: "Team_hackathonId_fkey")
  @@index([ownerId], map: "Team_ownerId_fkey")
}

model teaminvitation {
  id        Int      @id @default(autoincrement())
  teamId    Int
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime
  team      team     @relation(fields: [teamId], references: [id], map: "TeamInvitation_teamId_fkey")

  @@index([teamId], map: "TeamInvitation_teamId_fkey")
}

model teammember {
  id       Int      @id @default(autoincrement())
  teamId   Int
  userId   Int
  joinedAt DateTime @default(now())
  role     String
  team     team     @relation(fields: [teamId], references: [id], map: "TeamMember_teamId_fkey")
  user     user     @relation(fields: [userId], references: [id], map: "TeamMember_userId_fkey")

  @@unique([teamId, userId], map: "TeamMember_teamId_userId_key")
  @@index([userId], map: "TeamMember_userId_fkey")
}

model user {
  id                                           Int                 @id @default(autoincrement())
  firstName                                    String
  lastName                                     String
  email                                        String              @unique(map: "User_email_key")
  school                                       String?
  degree                                       String?
  education_level                              String?
  rating                                       Float               @default(0)
  description                                  String?
  password                                     String
  confirm_password                             String
  createdAt                                    DateTime            @default(now())
  updatedAt                                    DateTime
  experience                                   experience[]
  friendrequest_friendrequest_receiverIdTouser friendrequest[]     @relation("friendrequest_receiverIdTouser")
  friendrequest_friendrequest_senderIdTouser   friendrequest[]     @relation("friendrequest_senderIdTouser")
  friendship_friendship_user1IdTouser          friendship[]        @relation("friendship_user1IdTouser")
  friendship_friendship_user2IdTouser          friendship[]        @relation("friendship_user2IdTouser")
  message_message_receiverIdTouser             message[]           @relation("message_receiverIdTouser")
  message_message_senderIdTouser               message[]           @relation("message_senderIdTouser")
  notification                                 notification[]
  personalpreference                           personalpreference?
  review_review_giverIdTouser                  review[]            @relation("review_giverIdTouser")
  review_review_receiverIdTouser               review[]            @relation("review_receiverIdTouser")
  swipe_swipe_swipeeIdTouser                   swipe[]             @relation("swipe_swipeeIdTouser")
  swipe_swipe_swiperIdTouser                   swipe[]             @relation("swipe_swiperIdTouser")
  team                                         team[]
  teammember                                   teammember[]
  userskill                                    userskill[]
}

model userskill {
  id      Int    @id @default(autoincrement())
  userId  Int
  skillId Int
  level   String
  skill   skill  @relation(fields: [skillId], references: [id], map: "UserSkill_skillId_fkey")
  user    user   @relation(fields: [userId], references: [id], map: "UserSkill_userId_fkey")

  @@unique([userId, skillId], map: "UserSkill_userId_skillId_key")
  @@index([skillId], map: "UserSkill_skillId_fkey")
}
