// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  password        String
  firstName       String
  lastName        String
  description     String?
  school          String?
  degree          String?
  fieldOfStudy    String?   // Technology, Business, Marketing, or Ideate
  rating          Float     @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Profile relationships
  skills          UserSkill[]
  experiences     Experience[]
  receivedReviews Review[]        @relation("ReviewReceiver")
  givenReviews    Review[]        @relation("ReviewGiver")

  // Personal preferences
  preferences     PersonalPreference?

  // Connection & Friend features
  swipesGiven     Swipe[]         @relation("SwiperRelation")
  swipesReceived  Swipe[]         @relation("SwipeeRelation")
  friendsAsUser1  Friendship[]    @relation("User1")
  friendsAsUser2  Friendship[]    @relation("User2")
  friendRequests  FriendRequest[] @relation("RequestReceiver")
  sentRequests    FriendRequest[] @relation("RequestSender")

  // Messaging
  messagesSent    Message[]       @relation("MessageSender")
  messagesReceived Message[]      @relation("MessageReceiver")

  // Hackathon & Team features
  teamMemberships TeamMember[]
  ownedTeams      Team[]          @relation("TeamOwner")
  notifications   Notification[]  @relation("NotificationReceiver")
}

model Skill {
  id          Int         @id @default(autoincrement())
  name        String
  category    String      // Technical, Soft Skills, etc.
  users       UserSkill[]
}

model UserSkill {
  id          Int      @id @default(autoincrement())
  userId      Int
  skillId     Int
  level       String   // Beginner, Intermediate, Expert
  user        User     @relation(fields: [userId], references: [id])
  skill       Skill    @relation(fields: [skillId], references: [id])

  @@unique([userId, skillId])
}

model Experience {
  id          Int      @id @default(autoincrement())
  userId      Int
  title       String
  company     String?
  startDate   DateTime
  endDate     DateTime?
  description String
  location    String?
  user        User     @relation(fields: [userId], references: [id])
}

model Review {
  id          Int      @id @default(autoincrement())
  giverId     Int
  receiverId  Int
  rating      Int
  comment     String?
  createdAt   DateTime @default(now())
  giver       User     @relation("ReviewGiver", fields: [giverId], references: [id])
  receiver    User     @relation("ReviewReceiver", fields: [receiverId], references: [id])
}

model PersonalPreference {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  fieldOfStudy String?  // Technology, Business, Marketing, or Ideate
  user        User     @relation(fields: [userId], references: [id])
}

model Swipe {
  id          Int      @id @default(autoincrement())
  swiperId    Int
  swipeeId    Int
  isLike      Boolean
  createdAt   DateTime @default(now())
  swiper      User     @relation("SwiperRelation", fields: [swiperId], references: [id])
  swipee      User     @relation("SwipeeRelation", fields: [swipeeId], references: [id])
}

model Friendship {
  id          Int      @id @default(autoincrement())
  user1Id     Int
  user2Id     Int
  createdAt   DateTime @default(now())
  user1       User     @relation("User1", fields: [user1Id], references: [id])
  user2       User     @relation("User2", fields: [user2Id], references: [id])

  @@unique([user1Id, user2Id])
}

model FriendRequest {
  id          Int      @id @default(autoincrement())
  senderId    Int
  receiverId  Int
  status      String   // PENDING, ACCEPTED, REJECTED
  createdAt   DateTime @default(now())
  sender      User     @relation("RequestSender", fields: [senderId], references: [id])
  receiver    User     @relation("RequestReceiver", fields: [receiverId], references: [id])
}

model Message {
  id          Int      @id @default(autoincrement())
  senderId    Int
  receiverId  Int
  content     String
  createdAt   DateTime @default(now())
  readAt      DateTime?
  sender      User     @relation("MessageSender", fields: [senderId], references: [id])
  receiver    User     @relation("MessageReceiver", fields: [receiverId], references: [id])
}

model Hackathon {
  id              Int       @id @default(autoincrement())
  name            String
  description     String
  posterUrl       String?
  startDate       DateTime
  endDate         DateTime
  registrationStart DateTime
  registrationEnd   DateTime
  maxTeamSize     Int
  teams           Team[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Team {
  id          Int          @id @default(autoincrement())
  name        String
  hackathonId Int
  ownerId     Int
  isOpen      Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  hackathon   Hackathon    @relation(fields: [hackathonId], references: [id])
  owner       User         @relation("TeamOwner", fields: [ownerId], references: [id])
  members     TeamMember[]
  invitations TeamInvitation[]
}

model TeamMember {
  id          Int      @id @default(autoincrement())
  teamId      Int
  userId      Int
  joinedAt    DateTime @default(now())
  role        String   // OWNER, MEMBER
  
  team        Team     @relation(fields: [teamId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@unique([teamId, userId])
}

model TeamInvitation {
  id          Int      @id @default(autoincrement())
  teamId      Int
  status      String   // PENDING, ACCEPTED, REJECTED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  team        Team     @relation(fields: [teamId], references: [id])
}

model Notification {
  id          Int      @id @default(autoincrement())
  userId      Int
  type        String   // TEAM_INVITATION, MESSAGE, FRIEND_REQUEST
  content     String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  user        User     @relation("NotificationReceiver", fields: [userId], references: [id])
}