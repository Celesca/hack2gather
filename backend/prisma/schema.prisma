// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  User_ID        Int      @id @default(autoincrement())
  First_name     String
  Last_name      String
  DOB            DateTime
  Email          String   @unique
  Password       String
  Description    String?
  School_University String?
  Education      String?
  Rating         Int
  Skills         Skill[]
  Experiences    User_Experience[]
  Notifications  User_Notification[]
  Teams          Team[]
  Swipes_Swiper  Swipe[] @relation("SwiperRelation")
  Swipes_Swipee  Swipe[] @relation("SwipeeRelation")
  MatchesA       Match[] @relation("UserARelation")
  MatchesB       Match[] @relation("UserBRelation")
}

model Skill_Type {
  Skill_Type_ID  Int      @id @default(autoincrement())
  Category_Skill String
  Certification  String?
  Skill_Detail   String?
  Skill_Level    String
  Skills         Skill[]
}

model Skill {
  User_ID        Int
  Skill_ID       Int
  User           User     @relation(fields: [User_ID], references: [User_ID])
  SkillType      Skill_Type @relation(fields: [Skill_ID], references: [Skill_Type_ID])

  @@id([User_ID, Skill_ID])
}

model Experience {
  Experience_ID   Int      @id @default(autoincrement())
  Detail          String
  Company_Name    String?
  Start_Date      DateTime
  End_Date        DateTime
  Experience_Type String
  Location        String?
  Certification   String
  Users           User_Experience[]
}

model User_Experience {
  User_ID       Int
  Experience_ID Int
  User          User       @relation(fields: [User_ID], references: [User_ID])
  Experience    Experience @relation(fields: [Experience_ID], references: [Experience_ID])

  @@id([User_ID, Experience_ID])
}

model Notification {
  Notification_ID  Int      @id @default(autoincrement())
  Notification_detail String
  Notification_Status Boolean
  Users           User_Notification[]
}

model User_Notification {
  User_ID       Int
  Notification_ID Int
  User          User        @relation(fields: [User_ID], references: [User_ID])
  Notification  Notification @relation(fields: [Notification_ID], references: [Notification_ID])

  @@id([User_ID, Notification_ID])
}

model Personal {
  Personal_ID      Int      @id @default(autoincrement())
  Personal_type    String
  Personal_type_detail String?
}

model Hackathon {
  Hackathon_ID     Int      @id @default(autoincrement())
  Hackathon_Name   String
  Poster           String?
  Detail           String
  Start_recruiting DateTime
  End_recruiting   DateTime
  End_event        DateTime
  Reviews          Review[]
}

model Review {
  Review_ID        Int      @id @default(autoincrement())
  Detail           String
  Status_review    Boolean
  Hackathon_ID     Int
  Hackathon        Hackathon @relation(fields: [Hackathon_ID], references: [Hackathon_ID])
  Teams            Team[]
}

model Swipe {
  Swipe_ID         Int      @id @default(autoincrement())
  Swiper_ID        Int
  Swipee_ID        Int
  Swipe_Type       Boolean
  Swiper           User     @relation(name: "SwiperRelation", fields: [Swiper_ID], references: [User_ID])
  Swipee           User     @relation(name: "SwipeeRelation", fields: [Swipee_ID], references: [User_ID])
}

model Match {
  Match_ID         Int      @id @default(autoincrement())
  User_AID         Int
  User_BID         Int
  Match_Datetime   DateTime
  UserA            User     @relation(name: "UserARelation", fields: [User_AID], references: [User_ID])
  UserB            User     @relation(name: "UserBRelation", fields: [User_BID], references: [User_ID])
}

model Team {
  Team_ID          Int      @id @default(autoincrement())
  Team_Name        String
  User_ID          Int
  Review_ID        Int
  User             User     @relation(fields: [User_ID], references: [User_ID])
  Review           Review   @relation(fields: [Review_ID], references: [Review_ID])
}